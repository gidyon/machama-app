// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package transaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChamaAccountAPIClient is the client API for ChamaAccountAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChamaAccountAPIClient interface {
	CreateChamaAccount(ctx context.Context, in *CreateChamaAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListChamaAccounts(ctx context.Context, in *ListChamaAccountsRequest, opts ...grpc.CallOption) (*ListChamaAccountsResponse, error)
	GetChamaAccount(ctx context.Context, in *GetChamaAccountRequest, opts ...grpc.CallOption) (*ChamaAccount, error)
}

type chamaAccountAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewChamaAccountAPIClient(cc grpc.ClientConnInterface) ChamaAccountAPIClient {
	return &chamaAccountAPIClient{cc}
}

func (c *chamaAccountAPIClient) CreateChamaAccount(ctx context.Context, in *CreateChamaAccountRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.transaction.ChamaAccountAPI/CreateChamaAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chamaAccountAPIClient) ListChamaAccounts(ctx context.Context, in *ListChamaAccountsRequest, opts ...grpc.CallOption) (*ListChamaAccountsResponse, error) {
	out := new(ListChamaAccountsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.transaction.ChamaAccountAPI/ListChamaAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chamaAccountAPIClient) GetChamaAccount(ctx context.Context, in *GetChamaAccountRequest, opts ...grpc.CallOption) (*ChamaAccount, error) {
	out := new(ChamaAccount)
	err := c.cc.Invoke(ctx, "/gidyon.transaction.ChamaAccountAPI/GetChamaAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChamaAccountAPIServer is the server API for ChamaAccountAPI service.
// All implementations must embed UnimplementedChamaAccountAPIServer
// for forward compatibility
type ChamaAccountAPIServer interface {
	CreateChamaAccount(context.Context, *CreateChamaAccountRequest) (*emptypb.Empty, error)
	ListChamaAccounts(context.Context, *ListChamaAccountsRequest) (*ListChamaAccountsResponse, error)
	GetChamaAccount(context.Context, *GetChamaAccountRequest) (*ChamaAccount, error)
	mustEmbedUnimplementedChamaAccountAPIServer()
}

// UnimplementedChamaAccountAPIServer must be embedded to have forward compatible implementations.
type UnimplementedChamaAccountAPIServer struct {
}

func (UnimplementedChamaAccountAPIServer) CreateChamaAccount(context.Context, *CreateChamaAccountRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChamaAccount not implemented")
}
func (UnimplementedChamaAccountAPIServer) ListChamaAccounts(context.Context, *ListChamaAccountsRequest) (*ListChamaAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChamaAccounts not implemented")
}
func (UnimplementedChamaAccountAPIServer) GetChamaAccount(context.Context, *GetChamaAccountRequest) (*ChamaAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChamaAccount not implemented")
}
func (UnimplementedChamaAccountAPIServer) mustEmbedUnimplementedChamaAccountAPIServer() {}

// UnsafeChamaAccountAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChamaAccountAPIServer will
// result in compilation errors.
type UnsafeChamaAccountAPIServer interface {
	mustEmbedUnimplementedChamaAccountAPIServer()
}

func RegisterChamaAccountAPIServer(s grpc.ServiceRegistrar, srv ChamaAccountAPIServer) {
	s.RegisterService(&_ChamaAccountAPI_serviceDesc, srv)
}

func _ChamaAccountAPI_CreateChamaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChamaAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAccountAPIServer).CreateChamaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.transaction.ChamaAccountAPI/CreateChamaAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAccountAPIServer).CreateChamaAccount(ctx, req.(*CreateChamaAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChamaAccountAPI_ListChamaAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChamaAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAccountAPIServer).ListChamaAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.transaction.ChamaAccountAPI/ListChamaAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAccountAPIServer).ListChamaAccounts(ctx, req.(*ListChamaAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChamaAccountAPI_GetChamaAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChamaAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAccountAPIServer).GetChamaAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.transaction.ChamaAccountAPI/GetChamaAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAccountAPIServer).GetChamaAccount(ctx, req.(*GetChamaAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChamaAccountAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.transaction.ChamaAccountAPI",
	HandlerType: (*ChamaAccountAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChamaAccount",
			Handler:    _ChamaAccountAPI_CreateChamaAccount_Handler,
		},
		{
			MethodName: "ListChamaAccounts",
			Handler:    _ChamaAccountAPI_ListChamaAccounts_Handler,
		},
		{
			MethodName: "GetChamaAccount",
			Handler:    _ChamaAccountAPI_GetChamaAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction.proto",
}

// TransactionAPIClient is the client API for TransactionAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransactionAPIClient interface {
	Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
}

type transactionAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTransactionAPIClient(cc grpc.ClientConnInterface) TransactionAPIClient {
	return &transactionAPIClient{cc}
}

func (c *transactionAPIClient) Deposit(ctx context.Context, in *DepositRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.transaction.TransactionAPI/Deposit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionAPIClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.transaction.TransactionAPI/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionAPIClient) ListTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*ListTransactionsResponse, error) {
	out := new(ListTransactionsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.transaction.TransactionAPI/ListTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionAPIClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/gidyon.transaction.TransactionAPI/GetTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionAPIServer is the server API for TransactionAPI service.
// All implementations must embed UnimplementedTransactionAPIServer
// for forward compatibility
type TransactionAPIServer interface {
	Deposit(context.Context, *DepositRequest) (*emptypb.Empty, error)
	Withdraw(context.Context, *WithdrawRequest) (*emptypb.Empty, error)
	ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error)
	mustEmbedUnimplementedTransactionAPIServer()
}

// UnimplementedTransactionAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTransactionAPIServer struct {
}

func (UnimplementedTransactionAPIServer) Deposit(context.Context, *DepositRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deposit not implemented")
}
func (UnimplementedTransactionAPIServer) Withdraw(context.Context, *WithdrawRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedTransactionAPIServer) ListTransactions(context.Context, *ListTransactionsRequest) (*ListTransactionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactions not implemented")
}
func (UnimplementedTransactionAPIServer) GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedTransactionAPIServer) mustEmbedUnimplementedTransactionAPIServer() {}

// UnsafeTransactionAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransactionAPIServer will
// result in compilation errors.
type UnsafeTransactionAPIServer interface {
	mustEmbedUnimplementedTransactionAPIServer()
}

func RegisterTransactionAPIServer(s grpc.ServiceRegistrar, srv TransactionAPIServer) {
	s.RegisterService(&_TransactionAPI_serviceDesc, srv)
}

func _TransactionAPI_Deposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionAPIServer).Deposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.transaction.TransactionAPI/Deposit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionAPIServer).Deposit(ctx, req.(*DepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionAPI_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionAPIServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.transaction.TransactionAPI/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionAPIServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionAPI_ListTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionAPIServer).ListTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.transaction.TransactionAPI/ListTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionAPIServer).ListTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionAPI_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionAPIServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.transaction.TransactionAPI/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionAPIServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.transaction.TransactionAPI",
	HandlerType: (*TransactionAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deposit",
			Handler:    _TransactionAPI_Deposit_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _TransactionAPI_Withdraw_Handler,
		},
		{
			MethodName: "ListTransactions",
			Handler:    _TransactionAPI_ListTransactions_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _TransactionAPI_GetTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transaction.proto",
}
