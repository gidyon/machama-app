// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chama

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ChamaAPIClient is the client API for ChamaAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChamaAPIClient interface {
	CreateChama(ctx context.Context, in *CreateChamaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateChama(ctx context.Context, in *UpdateChamaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListChamas(ctx context.Context, in *ListChamasRequest, opts ...grpc.CallOption) (*ListChamasResponse, error)
	GetChama(ctx context.Context, in *GetChamaRequest, opts ...grpc.CallOption) (*Chama, error)
	CreateChamaMember(ctx context.Context, in *CreateChamaMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateChamaMember(ctx context.Context, in *UpdateChamaMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteChamaMember(ctx context.Context, in *DeleteChamaMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListChamaMembers(ctx context.Context, in *ListChamaMembersRequest, opts ...grpc.CallOption) (*ListChamaMembersResponse, error)
	GetChamaMember(ctx context.Context, in *GetChamaMemberRequest, opts ...grpc.CallOption) (*ChamaMember, error)
}

type chamaAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewChamaAPIClient(cc grpc.ClientConnInterface) ChamaAPIClient {
	return &chamaAPIClient{cc}
}

func (c *chamaAPIClient) CreateChama(ctx context.Context, in *CreateChamaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.chama.ChamaAPI/CreateChama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chamaAPIClient) UpdateChama(ctx context.Context, in *UpdateChamaRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.chama.ChamaAPI/UpdateChama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chamaAPIClient) ListChamas(ctx context.Context, in *ListChamasRequest, opts ...grpc.CallOption) (*ListChamasResponse, error) {
	out := new(ListChamasResponse)
	err := c.cc.Invoke(ctx, "/gidyon.chama.ChamaAPI/ListChamas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chamaAPIClient) GetChama(ctx context.Context, in *GetChamaRequest, opts ...grpc.CallOption) (*Chama, error) {
	out := new(Chama)
	err := c.cc.Invoke(ctx, "/gidyon.chama.ChamaAPI/GetChama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chamaAPIClient) CreateChamaMember(ctx context.Context, in *CreateChamaMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.chama.ChamaAPI/CreateChamaMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chamaAPIClient) UpdateChamaMember(ctx context.Context, in *UpdateChamaMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.chama.ChamaAPI/UpdateChamaMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chamaAPIClient) DeleteChamaMember(ctx context.Context, in *DeleteChamaMemberRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.chama.ChamaAPI/DeleteChamaMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chamaAPIClient) ListChamaMembers(ctx context.Context, in *ListChamaMembersRequest, opts ...grpc.CallOption) (*ListChamaMembersResponse, error) {
	out := new(ListChamaMembersResponse)
	err := c.cc.Invoke(ctx, "/gidyon.chama.ChamaAPI/ListChamaMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chamaAPIClient) GetChamaMember(ctx context.Context, in *GetChamaMemberRequest, opts ...grpc.CallOption) (*ChamaMember, error) {
	out := new(ChamaMember)
	err := c.cc.Invoke(ctx, "/gidyon.chama.ChamaAPI/GetChamaMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChamaAPIServer is the server API for ChamaAPI service.
// All implementations must embed UnimplementedChamaAPIServer
// for forward compatibility
type ChamaAPIServer interface {
	CreateChama(context.Context, *CreateChamaRequest) (*emptypb.Empty, error)
	UpdateChama(context.Context, *UpdateChamaRequest) (*emptypb.Empty, error)
	ListChamas(context.Context, *ListChamasRequest) (*ListChamasResponse, error)
	GetChama(context.Context, *GetChamaRequest) (*Chama, error)
	CreateChamaMember(context.Context, *CreateChamaMemberRequest) (*emptypb.Empty, error)
	UpdateChamaMember(context.Context, *UpdateChamaMemberRequest) (*emptypb.Empty, error)
	DeleteChamaMember(context.Context, *DeleteChamaMemberRequest) (*emptypb.Empty, error)
	ListChamaMembers(context.Context, *ListChamaMembersRequest) (*ListChamaMembersResponse, error)
	GetChamaMember(context.Context, *GetChamaMemberRequest) (*ChamaMember, error)
	mustEmbedUnimplementedChamaAPIServer()
}

// UnimplementedChamaAPIServer must be embedded to have forward compatible implementations.
type UnimplementedChamaAPIServer struct {
}

func (UnimplementedChamaAPIServer) CreateChama(context.Context, *CreateChamaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChama not implemented")
}
func (UnimplementedChamaAPIServer) UpdateChama(context.Context, *UpdateChamaRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChama not implemented")
}
func (UnimplementedChamaAPIServer) ListChamas(context.Context, *ListChamasRequest) (*ListChamasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChamas not implemented")
}
func (UnimplementedChamaAPIServer) GetChama(context.Context, *GetChamaRequest) (*Chama, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChama not implemented")
}
func (UnimplementedChamaAPIServer) CreateChamaMember(context.Context, *CreateChamaMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChamaMember not implemented")
}
func (UnimplementedChamaAPIServer) UpdateChamaMember(context.Context, *UpdateChamaMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChamaMember not implemented")
}
func (UnimplementedChamaAPIServer) DeleteChamaMember(context.Context, *DeleteChamaMemberRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChamaMember not implemented")
}
func (UnimplementedChamaAPIServer) ListChamaMembers(context.Context, *ListChamaMembersRequest) (*ListChamaMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChamaMembers not implemented")
}
func (UnimplementedChamaAPIServer) GetChamaMember(context.Context, *GetChamaMemberRequest) (*ChamaMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChamaMember not implemented")
}
func (UnimplementedChamaAPIServer) mustEmbedUnimplementedChamaAPIServer() {}

// UnsafeChamaAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChamaAPIServer will
// result in compilation errors.
type UnsafeChamaAPIServer interface {
	mustEmbedUnimplementedChamaAPIServer()
}

func RegisterChamaAPIServer(s grpc.ServiceRegistrar, srv ChamaAPIServer) {
	s.RegisterService(&_ChamaAPI_serviceDesc, srv)
}

func _ChamaAPI_CreateChama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChamaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAPIServer).CreateChama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.chama.ChamaAPI/CreateChama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAPIServer).CreateChama(ctx, req.(*CreateChamaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChamaAPI_UpdateChama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChamaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAPIServer).UpdateChama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.chama.ChamaAPI/UpdateChama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAPIServer).UpdateChama(ctx, req.(*UpdateChamaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChamaAPI_ListChamas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChamasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAPIServer).ListChamas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.chama.ChamaAPI/ListChamas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAPIServer).ListChamas(ctx, req.(*ListChamasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChamaAPI_GetChama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChamaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAPIServer).GetChama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.chama.ChamaAPI/GetChama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAPIServer).GetChama(ctx, req.(*GetChamaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChamaAPI_CreateChamaMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChamaMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAPIServer).CreateChamaMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.chama.ChamaAPI/CreateChamaMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAPIServer).CreateChamaMember(ctx, req.(*CreateChamaMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChamaAPI_UpdateChamaMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChamaMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAPIServer).UpdateChamaMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.chama.ChamaAPI/UpdateChamaMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAPIServer).UpdateChamaMember(ctx, req.(*UpdateChamaMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChamaAPI_DeleteChamaMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChamaMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAPIServer).DeleteChamaMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.chama.ChamaAPI/DeleteChamaMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAPIServer).DeleteChamaMember(ctx, req.(*DeleteChamaMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChamaAPI_ListChamaMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChamaMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAPIServer).ListChamaMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.chama.ChamaAPI/ListChamaMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAPIServer).ListChamaMembers(ctx, req.(*ListChamaMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChamaAPI_GetChamaMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChamaMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChamaAPIServer).GetChamaMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.chama.ChamaAPI/GetChamaMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChamaAPIServer).GetChamaMember(ctx, req.(*GetChamaMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChamaAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.chama.ChamaAPI",
	HandlerType: (*ChamaAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChama",
			Handler:    _ChamaAPI_CreateChama_Handler,
		},
		{
			MethodName: "UpdateChama",
			Handler:    _ChamaAPI_UpdateChama_Handler,
		},
		{
			MethodName: "ListChamas",
			Handler:    _ChamaAPI_ListChamas_Handler,
		},
		{
			MethodName: "GetChama",
			Handler:    _ChamaAPI_GetChama_Handler,
		},
		{
			MethodName: "CreateChamaMember",
			Handler:    _ChamaAPI_CreateChamaMember_Handler,
		},
		{
			MethodName: "UpdateChamaMember",
			Handler:    _ChamaAPI_UpdateChamaMember_Handler,
		},
		{
			MethodName: "DeleteChamaMember",
			Handler:    _ChamaAPI_DeleteChamaMember_Handler,
		},
		{
			MethodName: "ListChamaMembers",
			Handler:    _ChamaAPI_ListChamaMembers_Handler,
		},
		{
			MethodName: "GetChamaMember",
			Handler:    _ChamaAPI_GetChamaMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chama.proto",
}
