// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package loan

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// LoanProductAPIClient is the client API for LoanProductAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanProductAPIClient interface {
	CreateLoanProduct(ctx context.Context, in *CreateLoanProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLoanProduct(ctx context.Context, in *UpdateLoanProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteLoanProduct(ctx context.Context, in *DeleteLoanProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListLoanProducts(ctx context.Context, in *ListLoanProductsRequest, opts ...grpc.CallOption) (*ListLoanProductsResponse, error)
	GetLoanProduct(ctx context.Context, in *GetLoanProductRequest, opts ...grpc.CallOption) (*LoanProduct, error)
}

type loanProductAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanProductAPIClient(cc grpc.ClientConnInterface) LoanProductAPIClient {
	return &loanProductAPIClient{cc}
}

func (c *loanProductAPIClient) CreateLoanProduct(ctx context.Context, in *CreateLoanProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.loan.LoanProductAPI/CreateLoanProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductAPIClient) UpdateLoanProduct(ctx context.Context, in *UpdateLoanProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.loan.LoanProductAPI/UpdateLoanProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductAPIClient) DeleteLoanProduct(ctx context.Context, in *DeleteLoanProductRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.loan.LoanProductAPI/DeleteLoanProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductAPIClient) ListLoanProducts(ctx context.Context, in *ListLoanProductsRequest, opts ...grpc.CallOption) (*ListLoanProductsResponse, error) {
	out := new(ListLoanProductsResponse)
	err := c.cc.Invoke(ctx, "/gidyon.loan.LoanProductAPI/ListLoanProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanProductAPIClient) GetLoanProduct(ctx context.Context, in *GetLoanProductRequest, opts ...grpc.CallOption) (*LoanProduct, error) {
	out := new(LoanProduct)
	err := c.cc.Invoke(ctx, "/gidyon.loan.LoanProductAPI/GetLoanProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanProductAPIServer is the server API for LoanProductAPI service.
// All implementations must embed UnimplementedLoanProductAPIServer
// for forward compatibility
type LoanProductAPIServer interface {
	CreateLoanProduct(context.Context, *CreateLoanProductRequest) (*emptypb.Empty, error)
	UpdateLoanProduct(context.Context, *UpdateLoanProductRequest) (*emptypb.Empty, error)
	DeleteLoanProduct(context.Context, *DeleteLoanProductRequest) (*emptypb.Empty, error)
	ListLoanProducts(context.Context, *ListLoanProductsRequest) (*ListLoanProductsResponse, error)
	GetLoanProduct(context.Context, *GetLoanProductRequest) (*LoanProduct, error)
	mustEmbedUnimplementedLoanProductAPIServer()
}

// UnimplementedLoanProductAPIServer must be embedded to have forward compatible implementations.
type UnimplementedLoanProductAPIServer struct {
}

func (UnimplementedLoanProductAPIServer) CreateLoanProduct(context.Context, *CreateLoanProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoanProduct not implemented")
}
func (UnimplementedLoanProductAPIServer) UpdateLoanProduct(context.Context, *UpdateLoanProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoanProduct not implemented")
}
func (UnimplementedLoanProductAPIServer) DeleteLoanProduct(context.Context, *DeleteLoanProductRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoanProduct not implemented")
}
func (UnimplementedLoanProductAPIServer) ListLoanProducts(context.Context, *ListLoanProductsRequest) (*ListLoanProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoanProducts not implemented")
}
func (UnimplementedLoanProductAPIServer) GetLoanProduct(context.Context, *GetLoanProductRequest) (*LoanProduct, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoanProduct not implemented")
}
func (UnimplementedLoanProductAPIServer) mustEmbedUnimplementedLoanProductAPIServer() {}

// UnsafeLoanProductAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanProductAPIServer will
// result in compilation errors.
type UnsafeLoanProductAPIServer interface {
	mustEmbedUnimplementedLoanProductAPIServer()
}

func RegisterLoanProductAPIServer(s grpc.ServiceRegistrar, srv LoanProductAPIServer) {
	s.RegisterService(&_LoanProductAPI_serviceDesc, srv)
}

func _LoanProductAPI_CreateLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductAPIServer).CreateLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.loan.LoanProductAPI/CreateLoanProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductAPIServer).CreateLoanProduct(ctx, req.(*CreateLoanProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductAPI_UpdateLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoanProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductAPIServer).UpdateLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.loan.LoanProductAPI/UpdateLoanProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductAPIServer).UpdateLoanProduct(ctx, req.(*UpdateLoanProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductAPI_DeleteLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoanProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductAPIServer).DeleteLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.loan.LoanProductAPI/DeleteLoanProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductAPIServer).DeleteLoanProduct(ctx, req.(*DeleteLoanProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductAPI_ListLoanProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoanProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductAPIServer).ListLoanProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.loan.LoanProductAPI/ListLoanProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductAPIServer).ListLoanProducts(ctx, req.(*ListLoanProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanProductAPI_GetLoanProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanProductAPIServer).GetLoanProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.loan.LoanProductAPI/GetLoanProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanProductAPIServer).GetLoanProduct(ctx, req.(*GetLoanProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoanProductAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.loan.LoanProductAPI",
	HandlerType: (*LoanProductAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoanProduct",
			Handler:    _LoanProductAPI_CreateLoanProduct_Handler,
		},
		{
			MethodName: "UpdateLoanProduct",
			Handler:    _LoanProductAPI_UpdateLoanProduct_Handler,
		},
		{
			MethodName: "DeleteLoanProduct",
			Handler:    _LoanProductAPI_DeleteLoanProduct_Handler,
		},
		{
			MethodName: "ListLoanProducts",
			Handler:    _LoanProductAPI_ListLoanProducts_Handler,
		},
		{
			MethodName: "GetLoanProduct",
			Handler:    _LoanProductAPI_GetLoanProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan.proto",
}

// LoanAPIClient is the client API for LoanAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoanAPIClient interface {
	CreateLoan(ctx context.Context, in *CreateLoanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateLoan(ctx context.Context, in *UpdateLoanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListLoans(ctx context.Context, in *ListLoansRequest, opts ...grpc.CallOption) (*ListLoansResponse, error)
	GetLoan(ctx context.Context, in *GetLoanRequest, opts ...grpc.CallOption) (*Loan, error)
	ApproveLoan(ctx context.Context, in *ApproveLoanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type loanAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewLoanAPIClient(cc grpc.ClientConnInterface) LoanAPIClient {
	return &loanAPIClient{cc}
}

func (c *loanAPIClient) CreateLoan(ctx context.Context, in *CreateLoanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.loan.LoanAPI/CreateLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAPIClient) UpdateLoan(ctx context.Context, in *UpdateLoanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.loan.LoanAPI/UpdateLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAPIClient) ListLoans(ctx context.Context, in *ListLoansRequest, opts ...grpc.CallOption) (*ListLoansResponse, error) {
	out := new(ListLoansResponse)
	err := c.cc.Invoke(ctx, "/gidyon.loan.LoanAPI/ListLoans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAPIClient) GetLoan(ctx context.Context, in *GetLoanRequest, opts ...grpc.CallOption) (*Loan, error) {
	out := new(Loan)
	err := c.cc.Invoke(ctx, "/gidyon.loan.LoanAPI/GetLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loanAPIClient) ApproveLoan(ctx context.Context, in *ApproveLoanRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/gidyon.loan.LoanAPI/ApproveLoan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoanAPIServer is the server API for LoanAPI service.
// All implementations must embed UnimplementedLoanAPIServer
// for forward compatibility
type LoanAPIServer interface {
	CreateLoan(context.Context, *CreateLoanRequest) (*emptypb.Empty, error)
	UpdateLoan(context.Context, *UpdateLoanRequest) (*emptypb.Empty, error)
	ListLoans(context.Context, *ListLoansRequest) (*ListLoansResponse, error)
	GetLoan(context.Context, *GetLoanRequest) (*Loan, error)
	ApproveLoan(context.Context, *ApproveLoanRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedLoanAPIServer()
}

// UnimplementedLoanAPIServer must be embedded to have forward compatible implementations.
type UnimplementedLoanAPIServer struct {
}

func (UnimplementedLoanAPIServer) CreateLoan(context.Context, *CreateLoanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoan not implemented")
}
func (UnimplementedLoanAPIServer) UpdateLoan(context.Context, *UpdateLoanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoan not implemented")
}
func (UnimplementedLoanAPIServer) ListLoans(context.Context, *ListLoansRequest) (*ListLoansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLoans not implemented")
}
func (UnimplementedLoanAPIServer) GetLoan(context.Context, *GetLoanRequest) (*Loan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoan not implemented")
}
func (UnimplementedLoanAPIServer) ApproveLoan(context.Context, *ApproveLoanRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveLoan not implemented")
}
func (UnimplementedLoanAPIServer) mustEmbedUnimplementedLoanAPIServer() {}

// UnsafeLoanAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoanAPIServer will
// result in compilation errors.
type UnsafeLoanAPIServer interface {
	mustEmbedUnimplementedLoanAPIServer()
}

func RegisterLoanAPIServer(s grpc.ServiceRegistrar, srv LoanAPIServer) {
	s.RegisterService(&_LoanAPI_serviceDesc, srv)
}

func _LoanAPI_CreateLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAPIServer).CreateLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.loan.LoanAPI/CreateLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAPIServer).CreateLoan(ctx, req.(*CreateLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAPI_UpdateLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAPIServer).UpdateLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.loan.LoanAPI/UpdateLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAPIServer).UpdateLoan(ctx, req.(*UpdateLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAPI_ListLoans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLoansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAPIServer).ListLoans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.loan.LoanAPI/ListLoans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAPIServer).ListLoans(ctx, req.(*ListLoansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAPI_GetLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAPIServer).GetLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.loan.LoanAPI/GetLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAPIServer).GetLoan(ctx, req.(*GetLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoanAPI_ApproveLoan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveLoanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoanAPIServer).ApproveLoan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gidyon.loan.LoanAPI/ApproveLoan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoanAPIServer).ApproveLoan(ctx, req.(*ApproveLoanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LoanAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gidyon.loan.LoanAPI",
	HandlerType: (*LoanAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLoan",
			Handler:    _LoanAPI_CreateLoan_Handler,
		},
		{
			MethodName: "UpdateLoan",
			Handler:    _LoanAPI_UpdateLoan_Handler,
		},
		{
			MethodName: "ListLoans",
			Handler:    _LoanAPI_ListLoans_Handler,
		},
		{
			MethodName: "GetLoan",
			Handler:    _LoanAPI_GetLoan_Handler,
		},
		{
			MethodName: "ApproveLoan",
			Handler:    _LoanAPI_ApproveLoan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loan.proto",
}
